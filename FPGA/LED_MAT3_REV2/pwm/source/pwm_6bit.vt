// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Intel and sold by Intel or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench template that is freely editable to  
// suit user's needs .Comments are provided in each section to help the user    
// fill out necessary details.                                                  
// *****************************************************************************
// Generated on "10/19/2017 13:53:48"
                                                                                
// Verilog Test Bench template for design : pwm_6bit
// 
// Simulation tool : ModelSim-Altera (Verilog)
// 

`timescale 1 ns/ 1 ps
module pwm_6bit_vlg_tst();
// constants                                           
parameter DC_WIDTH = 4;

// general purpose registers

// test vector input registers
reg CLK;
reg [DC_WIDTH-1:0] DC;
reg RESET;
reg STB_CLK;
// wires                                               
wire Q;


// assign statements (if any)                          
pwm_6bit 
#( .DC_WIDTH (DC_WIDTH) )
pwm_4bit_inst
 (
// port map - connection between master ports and signals/registers   
	.CLK(CLK),
	.DC(DC),
	.Q(Q),
	.RESET(RESET),
	.STB_CLK(STB_CLK)
);

initial                                                
begin
                                                  
 $display("Running testbench");                       

 CLK = 0;
 STB_CLK = 1'b1;
 RESET = 1'b1;
 
 DC = 4'hF;
 
 #50 RESET = 0;
 
 #20000 DC = 4'hC;
 #40000 DC = 4'h8;
 #60000 DC = 4'h4;
 #80000 DC = 4'h0;
 
 #100000 $stop;
 
end                                                    

always                                                 
// optional sensitivity list                           
// @(event1 or event2 or .... eventn)                  
begin                                                  

 #25 CLK = ! CLK; // 20MHz clock


//@eachvec;                                              
end 
                                                   
endmodule

